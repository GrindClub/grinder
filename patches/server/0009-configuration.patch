From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aaron <bauhd@gmx.net>
Date: Sat, 1 Jun 2024 15:41:48 +0200
Subject: [PATCH] configuration


diff --git a/src/main/java/grinder/GrinderConfiguration.java b/src/main/java/grinder/GrinderConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..51d5c2c52a1c2fc6a7c3b11aae1d4500dbadb2c2
--- /dev/null
+++ b/src/main/java/grinder/GrinderConfiguration.java
@@ -0,0 +1,28 @@
+package grinder;
+
+import io.papermc.paper.configuration.ConfigurationLoaders;
+import java.nio.file.Path;
+import org.spongepowered.configurate.CommentedConfigurationNode;
+import org.spongepowered.configurate.ConfigurateException;
+import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
+
+public final class GrinderConfiguration {
+    public static final boolean SERVER_SIDE_FROZEN;
+    public static final boolean BLOCK_ENTITY_TICKING;
+    public static final boolean LOAD_RECIPES;
+
+    static {
+        try {
+            final YamlConfigurationLoader loader = ConfigurationLoaders.naturallySorted()
+                .path(Path.of("config", "grinder.yml"))
+                .build();
+            final CommentedConfigurationNode node = loader.load();
+            SERVER_SIDE_FROZEN = node.node("server-side-frozen").getBoolean(false);
+            BLOCK_ENTITY_TICKING = node.node("block-entity-ticking").getBoolean(true);
+            LOAD_RECIPES = node.node("load-recipes").getBoolean(true);
+            loader.save(node);
+        } catch (ConfigurateException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index c96f3dcd365bc140b1f4680ef6bd770c80f8eda1..b29df5a7674326cfff133f45343cd6b50b41ac2d 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -628,7 +628,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
         this.handlingTick = true;
         TickRateManager tickratemanager = this.tickRateManager();
-        boolean flag = tickratemanager.runsNormally();
+        boolean flag = !grinder.GrinderConfiguration.SERVER_SIDE_FROZEN && tickratemanager.runsNormally(); // Grinder
 
         if (flag) {
             gameprofilerfiller.push("world border");
@@ -743,7 +743,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             this.timings.entityTick.stopTiming(); // Spigot
             this.timings.tickEntities.stopTiming(); // Spigot
             gameprofilerfiller.pop();
-            this.tickBlockEntities();
+            if (grinder.GrinderConfiguration.BLOCK_ENTITY_TICKING) this.tickBlockEntities();
         }
 
         gameprofilerfiller.push("entityManagement");
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index de7c77c1b25680ecc65f0f43f2391aff269a974f..5ae6e4fe0b4c3d3353f4161350c5acd7b160eb36 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -58,6 +58,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
         Builder<RecipeType<?>, RecipeHolder<?>> builder = ImmutableMultimap.builder();
         com.google.common.collect.ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>> com_google_common_collect_immutablemap_builder = ImmutableMap.builder();
         RegistryOps<JsonElement> registryops = this.registries.createSerializationContext(JsonOps.INSTANCE);
+        if (grinder.GrinderConfiguration.LOAD_RECIPES) {
         Iterator iterator = prepared.entrySet().iterator();
 
         while (iterator.hasNext()) {
@@ -74,6 +75,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
                 RecipeManager.LOGGER.error("Parsing error loading recipe {}", minecraftkey, jsonparseexception);
             }
         }
+        }
 
         // CraftBukkit start - mutable
         this.byType = LinkedHashMultimap.create(builder.build());
