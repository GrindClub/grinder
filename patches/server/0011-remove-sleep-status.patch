From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aaron <bauhd@gmx.net>
Date: Tue, 18 Jun 2024 23:11:53 +0200
Subject: [PATCH] remove sleep status


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 52d10c3362564e52cac2a8aa1edc51b743412688..1b67882f5efeeff5f33642c99e34341d2b34036a 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -570,7 +570,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             this.dragonFight = null;
         }
 
-        this.sleepStatus = new SleepStatus();
+        //this.sleepStatus = new SleepStatus(); // Grinder
         this.gameEventDispatcher = new GameEventDispatcher(this);
         this.randomSequences = (RandomSequences) Objects.requireNonNullElseGet(randomsequences, () -> {
             return (RandomSequences) this.getDataStorage().computeIfAbsent(RandomSequences.factory(l), "random_sequences");
@@ -636,7 +636,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             this.advanceWeatherCycle();
         }
 
-        int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
+        /*int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
         long j;
 
         if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
@@ -657,7 +657,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
                 this.resetWeatherCycle();
             }
-        }
+        }*/ // Grinder - no sleeping
 
         this.updateSkyBrightness();
         if (flag) {
@@ -667,7 +667,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         gameprofilerfiller.popPush("tickPending");
         this.timings.scheduledBlocks.startTiming(); // Paper
         if (!this.isDebug() && flag) {
-            j = this.getGameTime();
+            long j = this.getGameTime(); // Grinder
             gameprofilerfiller.push("blockTicks");
             this.blockTicks.tick(j, paperConfig().environment.maxBlockTicks, this::tickBlock); // Paper - configurable max block ticks
             gameprofilerfiller.popPush("fluidTicks");
@@ -790,12 +790,13 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         return !this.server.isSpawningAnimals() && (entity instanceof Animal || entity instanceof WaterAnimal) ? true : !this.server.areNpcsEnabled() && entity instanceof Npc;
     }
 
-    private void wakeUpAllPlayers() {
+    /*private void wakeUpAllPlayers() {
         this.sleepStatus.removeAllSleepers();
         (this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((entityplayer) -> { // CraftBukkit - decompile error
             entityplayer.stopSleepInBed(false, false);
         });
     }
+    }*/ // Grinder
 
     public void tickChunk(LevelChunk chunk, int randomTickSpeed) {
         ChunkPos chunkcoordintpair = chunk.getPos();
@@ -972,7 +973,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         return this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE) <= 100;
     }
 
-    private void announceSleepStatus() {
+    /*private void announceSleepStatus() {
         if (this.canSleepThroughNights()) {
             if (!this.getServer().isSingleplayer() || this.getServer().isPublished()) {
                 int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
@@ -994,12 +995,12 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
             }
         }
-    }
+    }*/ // Grinder
 
     public void updateSleepingPlayerList() {
-        if (!this.players.isEmpty() && this.sleepStatus.update(this.players)) {
+        /*if (!this.players.isEmpty() && this.sleepStatus.update(this.players)) {
             this.announceSleepStatus();
-        }
+        }*/ // Grinder
 
     }
 
