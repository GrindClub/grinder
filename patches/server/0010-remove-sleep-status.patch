From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aaron <bauhd@gmx.net>
Date: Tue, 18 Jun 2024 23:11:53 +0200
Subject: [PATCH] remove sleep status


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 73980bbca72a88997404a1d3fcd641a440aaa623..fddb607f8a9c7ee9869b12535b39698994f74b78 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -202,7 +202,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     // Paper - rewrite chunk system
     private final GameEventDispatcher gameEventDispatcher;
     public boolean noSave;
-    private final SleepStatus sleepStatus;
+    //private final SleepStatus sleepStatus; // Grinder - remove sleep status
     private int emptyTime;
     private final PortalForcer portalForcer;
     private final LevelTicks<Block> blockTicks;
@@ -571,7 +571,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             this.dragonFight = null;
         }
 
-        this.sleepStatus = new SleepStatus();
+        //this.sleepStatus = new SleepStatus(); // Grinder - remove sleep status
         this.gameEventDispatcher = new GameEventDispatcher(this);
         this.randomSequences = (RandomSequences) Objects.requireNonNullElseGet(randomsequences, () -> {
             return (RandomSequences) this.getDataStorage().computeIfAbsent(RandomSequences.factory(l), "random_sequences");
@@ -637,10 +637,10 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             this.advanceWeatherCycle();
         }
 
-        int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
+        //int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE); // Grinder - remove sleep status
         long j;
 
-        if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+        /*if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
             // CraftBukkit start
             j = this.levelData.getDayTime() + 24000L;
             TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
@@ -658,7 +658,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
                 this.resetWeatherCycle();
             }
-        }
+        }*/ // Grinder - remove sleep status
 
         this.updateSkyBrightness();
         if (flag) {
@@ -792,7 +792,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     }
 
     private void wakeUpAllPlayers() {
-        this.sleepStatus.removeAllSleepers();
+        //this.sleepStatus.removeAllSleepers(); // Grinder - remove sleep status
         (this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((entityplayer) -> { // CraftBukkit - decompile error
             entityplayer.stopSleepInBed(false, false);
         });
@@ -1002,7 +1002,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         return this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE) <= 100;
     }
 
-    private void announceSleepStatus() {
+    /*private void announceSleepStatus() {
         if (this.canSleepThroughNights()) {
             if (!this.getServer().isSingleplayer() || this.getServer().isPublished()) {
                 int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
@@ -1024,12 +1024,12 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
             }
         }
-    }
+    }*/ // Grinder - remove sleep status
 
     public void updateSleepingPlayerList() {
-        if (!this.players.isEmpty() && this.sleepStatus.update(this.players)) {
+        /*if (!this.players.isEmpty() && this.sleepStatus.update(this.players)) {
             this.announceSleepStatus();
-        }
+        }*/ // Grinder - remove sleep status
 
     }
 
